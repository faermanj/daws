Description: Pair of EC2 instances behind an ALB

Parameters:
  EnvId:
    Type: String
    Default: project

  InstanceType:
    Type: String
    Default: t4g.small
    ConstraintDescription: Must be a valid and available EC2 instance type.

Resources:
  InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "${EnvId}-IsolatedSubnet1Id"
      InstanceType: !Ref InstanceType
      ImageId:
        Fn::Sub: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64}}"
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" \
            -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" \
            http://169.254.169.254/latest/meta-data/instance-id)
          echo "Instance ID: $INSTANCE_ID" > /home/ec2-user/index.html
          sudo -u ec2-user nohup python3 -m http.server 8080 --directory /home/ec2-user &
          echo "user-data script finished"

  InstanceB:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "${EnvId}-IsolatedSubnet1Id"
      InstanceType: !Ref InstanceType
      ImageId:
        Fn::Sub: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2}}"
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" \
            -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" \
            http://169.254.169.254/latest/meta-data/instance-id)
          echo "Instance ID: $INSTANCE_ID" > /home/ec2-user/index.html
          sudo -u ec2-user nohup python3 -m http.server 8080 --directory /home/ec2-user &
          echo "user-data script finished"

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App Instances 
      VpcId:
        Fn::ImportValue: !Sub "${EnvId}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub "${EnvId}-ALBSecurityGroupId"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${EnvId}-VpcId"
      Protocol: HTTP
      Port: 8080
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Targets:
        - Id: !Ref InstanceA
        - Id: !Ref InstanceB

  InstancesRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${EnvId}-HttpsListenerArn"
      Priority: 100
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup

Outputs:
  InstanceAId:
    Description: ID of Instance A
    Value: !Ref InstanceA
  InstanceBId:
    Description: ID of Instance B
    Value: !Ref InstanceB
  InstanceSecurityGroupId:
    Description: Security Group ID for instances
    Value: !Ref InstanceSecurityGroup
  AlbTargetGroupArn:
    Description: ARN of the ALB Target Group
    Value: !Ref AlbTargetGroup
