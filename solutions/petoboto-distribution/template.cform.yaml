# aws cloudformation deploy --stack-name s3-distribution --template-file solutions/petoboto-resources/bucket.cform.yaml
# aws s3 cp solutions/petoboto-resources/src/ s3://$BUCKET_NAME/ --acl public-read

# aws cloudformation deploy --stack-name vpc-3ha --template-file cloudformation/vpc-3ha/template.cform.yaml
# aws cloudformation deploy --stack-name rds-mysql-sls --template-file cloudformation/rds-mysql-sls/template.cform.yaml --parameter-overrides DBPassword=Masterkey123
# mvn -f solutions/petoboto-api-fn clean verify
# sam deploy --stack-name petoboto-api-fn --template-file solutions/petoboto-api-fn/sam.cform.yaml --capabilities CAPABILITY_IAM --resolve-s3
# API_URL=$(aws cloudformation describe-stacks --stack-name petoboto-api-fn --query "Stacks[0].Outputs[?OutputKey=='PetobotoApiUrl'].OutputValue" --output text)
# echo $API_URL
# curl -s "$API_URL/api/pets/"

# aws cloudformation deploy --stack-name cloudfront --template-file cloudformation/cloudfront/template.cform.yaml
# DISTRIBUTION_DOMAIN=$(aws cloudformation describe-stacks --stack-name cloudfront --query "Stacks[0].Outputs[?OutputKey=='DistributionDomainName'].OutputValue" --output text)
# echo "http://$DISTRIBUTION_DOMAIN/"
# echo "http://$DISTRIBUTION_DOMAIN/tuna-bigfile.jpg"
# time curl -s "http://$DISTRIBUTION_DOMAIN/tuna-bigfile.jpg" -o /dev/null
# ab -k -t 333 -c 22 -r "http://$DISTRIBUTION_DOMAIN/tuna-bigfile.jpg"

AWSTemplateFormatVersion: 2010-09-09
Description: CloudFront distribution with S3 default origin

Parameters:
  EnvId:
    Type: String
    Default: project
    Description: Environment identifier used for cross-stack imports.

  DomainName:
    Type: String
    Description: "The domain name for the Distribution"

Resources:
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${EnvId}-oac"
        Description: !Sub "OAC for CloudFront distribution ${EnvId}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "CloudFront distribution for ${EnvId}"
        Enabled: true
        PriceClass: PriceClass_100
        DefaultRootObject: index.html
        Logging:
          Bucket:
            Fn::Sub:
              - ${LogsBucket}.s3.amazonaws.com
              - LogsBucket:
                  Fn::ImportValue:
                    Fn::Sub: "${EnvId}-LogsBucketName"
          Prefix: !Sub "cloudfront/${EnvId}/"
          IncludeCookies: false
        Aliases:
          - !Sub "*.${DomainName}"
          - !Sub "${EnvId}.${DomainName}"
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn:
            Fn::ImportValue: !Sub "${EnvId}-AcmCertificateArn"
          MinimumProtocolVersion: TLSv1.2_2021

        Origins:
          - Id: S3Origin
            DomainName:
              Fn::Sub:
                - ${BucketName}.s3.${AWS::Region}.amazonaws.com
                - BucketName:
                    Fn::ImportValue:
                      Fn::Sub: "${EnvId}-ResourcesBucketName"
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
          - Id: APIOrigin
            # redirect to API Gateway endpoint http api on /api/*
            DomainName:
              Fn::ImportValue:
                Fn::Sub: "${EnvId}-PetobotoApiDnsName"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: all

  ResourcesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::ImportValue:
          Fn::Sub: "${EnvId}-ResourcesBucketName"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com   
            Action:
              - s3:GetObject
            Resource:
              Fn::Sub:
                - arn:aws:s3:::${BucketName}/*
                - BucketName:
                    Fn::ImportValue:
                      Fn::Sub: "${EnvId}-ResourcesBucketName"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::ImportValue:
          Fn::Sub: "${EnvId}-LogsBucketName"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontDeliveryV2PutObject
            Effect: Allow
            Principal:
              Service: delivery.logs.cloudfront.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub:
                - arn:aws:s3:::${BucketName}/${Prefix}*
                - BucketName:
                    Fn::ImportValue:
                      Fn::Sub: "${EnvId}-LogsBucketName"
                  Prefix: !Sub "cloudfront/${EnvId}/"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"
          - Sid: AllowCloudFrontDeliveryV2AclBypass
            Effect: Allow
            Principal:
              Service: delivery.logs.cloudfront.amazonaws.com
            Action:
              - s3:PutObjectAcl
            Resource:
              Fn::Sub:
                - arn:aws:s3:::${BucketName}/${Prefix}*
                - BucketName:
                    Fn::ImportValue:
                      Fn::Sub: "${EnvId}-LogsBucketName"
                  Prefix: !Sub "cloudfront/${EnvId}/"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"

Outputs:
  DistributionId:
    Description: CloudFront distribution identifier.
    Value: !Ref Distribution
    Export:
      Name: !Sub "${EnvId}-DistributionId"
  DistributionDomainName:
    Description: CloudFront distribution domain name.
    Value: !GetAtt Distribution.DomainName
    Export:
      Name: !Sub "${EnvId}-DistributionDomainName"
